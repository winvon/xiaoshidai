<?php

namespace backend\models;

use common\helpers\ConstantHelper;
use Yii;
use common\helpers\Param;

/**
 * This is the model class for table "{{%coupon}}".
 *
 * @property int $id
 * @property int $type
 * @property string $coupon_name
 * @property double $coupon_price
 * @property double $coupon_val
 * @property int $is_lock
 * @property int $is_delete
 * @property int $number
 * @property int $max_number
 * @property string $start_time
 * @property string $end_time
 * @property string $consume_start_time
 * @property string $consume_end_time
 * @property int $created_at
 * @property int $updated_at
 */
class Coupon extends \backend\models\BaseModel
{

    const TYPE_MANE_JIAN = 1;
    const TYPE_WU_MEN_KAN = 2;
    const TYPE_MANE_ZHEKOU = 3;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%coupon}}';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['type', 'coupon_name', 'coupon_price', 'coupon_val', 'number', 'max_number', 'start_time', 'end_time', 'consume_start_time', 'consume_end_time'], 'required'],
            [['type', 'is_lock', 'is_delete', 'number', 'max_number'], 'integer'],
            [['coupon_price', 'coupon_val'], 'number'],
            [['coupon_name'], 'string', 'max' => 50],
            ['is_lock', 'default', 'value' => 0],
            [['start_time', 'end_time', 'consume_start_time', 'consume_end_time'], 'gtTimeNow'],
            [['end_time', 'consume_end_time'], 'gtStartTime']
        ];
    }

    public function gtTimeNow($attribute, $params)
    {
        if (strtotime($this->$attribute) <= time()) {
            $this->addError($attribute, $this->attributeLabels()[$attribute] . '必须大于当前时间');
        }
    }


    public function gtStartTime($attribute, $params)
    {
        if ($attribute == 'end_time') {
            if (strtotime($this->$attribute) <= strtotime($this->start_time)) {
                $this->addError($attribute, $this->attributeLabels()[$attribute]. '必须大于开始领取时间');
            }
        }

        if ($attribute == 'consume_end_time') {
            if (strtotime($this->$attribute) <= strtotime($this->consume_start_time)) {
                $this->addError($attribute, $this->attributeLabels()[$attribute] . '必须大于开始使用时间');
            }
        }
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'type' => '类别',
            'coupon_name' => '名称',
            'coupon_price' => '符合条件',
            'coupon_val' => '优惠券值',
            'is_lock' => '是否冻结',
            'is_delete' => 'Is Delete',
            'number' => '发行数量',
            'max_number' => '每人限领取数量',
            'start_time' => '开始领取时间',
            'end_time' => '结束领取时间',
            'consume_start_time' => '开始使用时间',
            'consume_end_time' => '结束使用时间',
            'created_at' => '创建时间',
            'updated_at' => '更新时间',
        ];
    }

    /**
     * @return array
     */
    public function scenarios()
    {
        return array_merge(parent::scenarios(), [
            'delete' => ['is_delete'],
            'lock' => ['is_lock'],
        ]); // TODO: Change the autogenerated stub
    }

    /**
     * 通过id查询数据
     * @param $id
     * @return bool|null|static
     */
    public function findOneById($id)
    {
        $model = self::findOne(['id' => $id]);
        if ($model) {
            return $model;
        }
        return false;
    }

    /**
     * 处理返回数据
     * @return array
     */
    public function getView()
    {
        return [
            'id' => (string)$this->id,
            'type' => $this->type,
            'coupon_name' => $this->coupon_name,
            'coupon_price' => $this->coupon_price,
            'coupon_val' => $this->coupon_val,
            'is_lock' => $this->is_lock,
            'number' => $this->number,
            'max_number' => $this->max_number,
            'start_time' => date("Y-m-d H:i", $this->start_time),
            'end_time' => date("Y-m-d H:i", $this->end_time),
            'consume_start_time' => date("Y-m-d H:i", $this->consume_start_time),
            'consume_end_time' => date("Y-m-d H:i", $this->consume_end_time),
            'updated_at' => date("Y-m-d H:i", $this->updated_at),
            'created_at' => date("Y-m-d H:i", $this->created_at),
        ];
    }

    /**
     * 新增优惠券
     * @param $data
     * @return array|bool
     */
    public function createCoupon($data)
    {
        $model = new self();
        $model->attributes = $data;
        if ($model->validate() && $model->save()) {
            return true;
        }
        return $model->getErrors();
    }

    /**
     * 处理保存前的数据格式
     * @param bool $insert
     * @return bool
     */
    public function beforeSave($insert)
    {
        if ($this->isNewRecord) {
            $this->is_delete = self::DELETE_NOT;
            $this->start_time = strtotime($this->start_time);
            $this->end_time = strtotime($this->end_time);
            $this->consume_start_time = strtotime($this->consume_start_time);
            $this->consume_end_time = strtotime($this->consume_end_time);
            $this->created_at = time();
            $this->updated_at = time();
        } else {
            $this->updated_at = time();
        }
        return parent::beforeSave($insert);
    }

    /**
     * 获取查询sql
     * @param $params
     * @return $this
     */
    public function getQuery($params)
    {
        return $query = self::find()
            ->where(['is_delete' => self::DELETE_NOT])
            ->andFilterWhere(['like', 'coupon_name', $params['coupon_name']])
            ->andFilterWhere(['like', 'coupon_price', $params['coupon_price']])
            ->andFilterWhere(['like', 'coupon_val', $params['coupon_val']])
            ->andFilterWhere(['is_lock' => $params['is_lock']])
            ->andFilterWhere(['type' => $params['type']]);
    }

    /**
     * 修改优惠券
     * @param $params
     * @return array|bool
     */
    public function modifyCoupon($params)
    {
        $this->attributes = $params;
        if (!empty($params['start_time'])) {
            $this->start_time = strtotime($this->start_time);
        }
        if (!empty($params['end_time'])) {
            $this->end_time = strtotime($this->end_time);
        }
        if (!empty($params['consume_start_time'])) {
            $this->consume_start_time = strtotime($this->consume_start_time);
        }
        if (!empty($params['consume_end_time'])) {
            $this->consume_end_time = strtotime($this->consume_end_time);
        }
        if ($this->save()) {
            return true;
        }
        return $this->getErrors();
    }

    /**
     * 获取数据列
     * @param $params
     * @return array
     */
    public function getList($params)
    {
        $page_size = Param::getHeaders('page-size');
        $page = Param::getHeaders('page');
        $query = self::getQuery($params);
        $models = $query->limit($page_size)
            ->offset(($page - 1) * $page_size)
            ->orderBy('created_at DESC')
            ->all();
        $list = [];
        foreach ($models as $model) {
            $list[] = $model->getView();
        }
        $count = $query->count();
        $param[ConstantHelper::COUNT] = $count;
        $param[ConstantHelper::PAGE] = $page;
        $param[ConstantHelper::PAGE_SIZE] = $page_size;
        $param[ConstantHelper::PAGE_COUNT] = ceil($count / $page_size);
        $param[ConstantHelper::LISTS] = $list;
        return self::backListFormat($param);
    }

    /**
     * 删除优惠券
     * @param $this ->id
     * @return array|bool
     */
    public function del()
    {
        $this->scenario = 'delete';
        $this->is_delete = self::DELETED;
        UserCoupon::updateAll(['is_delete' => self::DELETED], ['coupon_id' => $this->id]);
        if ($this->save()) {
            return true;
        }
        return $this->getErrors();
    }

    /**
     * 冻结或解冻优惠券
     * @param $this ->id
     * @return array|bool
     */
    public function lockCouponById()
    {
        $this->scenario = 'lock';
        if ($this->is_lock === ConstantHelper::IS_LOCK_TRUE) {
            $this->is_lock = ConstantHelper::IS_LOCK_FALSE;
        } else {
            $this->is_lock = ConstantHelper::IS_LOCK_TRUE;
        }
        UserCoupon::updateAll(['is_lock' => $this->is_lock], ['coupon_id' => $this->id]);
        if ($this->save()) {
            return true;
        }
        return $this->getErrors();
    }


}
