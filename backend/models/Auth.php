<?php

namespace backend\models;

use common\helpers\ConstantHelper;
use common\helpers\FamilyTree;
use common\helpers\Param;
use Yii;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "{{%auth}}".
 *
 * @property int $id
 * @property string $mark
 * @property string $auth_name
 * @property string route_url
 * @property int $parent_id
 * @property int $is_delete
 * @property int $is_lock
 * @property int $created_at
 * @property int $updated_at
 */
class Auth extends BaseModel
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%auth}}';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['auth_name', 'route_url'], 'required'],
            [['parent_id', 'is_delete', 'is_lock', 'created_at', 'updated_at'], 'integer'],
            [['mark'], 'string', 'max' => 50],
//            [
//                'route_url',
//                'match',
//                'pattern' => '/^[\/].*/',
//                'message' => Yii::t('app', Yii::t('app', '必须以 "/"开头， 例: "/module/controller/action" '))
//            ],
            ['parent_id', 'default', 'value' => 0],
            ['is_delete', 'default', 'value' => 0],
            ['is_lock', 'default', 'value' => 0],
            [['auth_name'], 'string', 'max' => 50],
            [['route_url', 'auth_name'], 'trim'],
        ];
    }

    /**
     * @return array
     * @author von
     */
    public function scenarios()
    {
        return array_merge(parent::scenarios(),
            [
                'delete' => ['is_delete'],
                'lock' => ['is_lock'],
            ]); // TODO: Change the autogenerated stub
    }


    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'mark' => '标识',
            'auth_name' => '权限名称',
            'route_url' => '路由',
            'parent_id' => '父ID',
            'is_delete' => 'Is Delete',
            'is_lock' => '冻结',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }

    /**
     * @param bool $insert
     * @return bool
     * @author von
     */
    public function beforeSave($insert)
    {
        parent::beforeSave($insert);
        if ($this->isNewRecord) {
            $this->created_at = time();
            $this->mark = Yii::$app->security->generateRandomString();
            if ($this->getAuth($this->route_url) != null) {
                $this->addError('route_url', $this->attributeLabels()['route_url'] . '已存在');
                return false;
            }
        } else {
            if ($this->id == $this->parent_id) {
                $this->addError('parent_id', '不允许当前Item作为父ID');
                return false;
            }
            $familyTree = new FamilyTree(self::_getAuths());
            $descendants = $familyTree->getDescendants($this->id);
            $descendants = ArrayHelper::getColumn($descendants, 'id');
            if (in_array($this->parent_id, $descendants)) {
                $this->addError('parent_id', '其子Item不允许作为父ID');
                return false;
            }
        }
        $this->updated_at = time();
        return true;
    }

    /**
     * @param $type
     * @return array|\yii\db\ActiveRecord[]
     */
    public static function _getAuths()
    {
        static $menus = null;
        if ($menus === null) $menus = self::find()->where(['is_delete' => ConstantHelper::IS_DELETE_FALSE])->orderBy("parent_id asc")->asArray()->all();
        return $menus;
    }

    /**
     * 新增权限
     * @param $data
     * @return array|bool
     */
    public function createAuth($data)
    {
        $model = new self();
        $model->attributes = $data;
        if ($model->save()) {
            return true;
        }
        return $model->getErrors();
    }

    /**
     * 修改权限
     * @param $params
     * @return array|bool
     */
    public function modifyAuth($params)
    {
        $this->attributes = $params;
        if ($this->getOldAttribute('route_url') != $this->getAttribute('route_url')) {
            $this->addError('route_url', $this->attributeLabels()['route_url'] . '已存在');
            return $this->getErrors();
        }
        if ($this->validate() && $this->save()) {
            return true;
        }
        return $this->getErrors();
    }

    /**
     * 获取权限
     * @param null $route_url
     * @return array|null|\yii\db\ActiveRecord
     * @author von
     */
    public function getAuth($route_url = null)
    {
        if (empty($route_url)) return null;
        return self::find()
            ->where(['is_delete' => ConstantHelper::IS_DELETE_FALSE])
            ->andWhere(['route_url' => $route_url])
            ->orderBy("parent_id asc")
            ->one();
    }

    /**
     * @param int $id
     * @return null|static
     * @author von
     */
    public function findOneById($id = 0)
    {
        return self::findOne($id);
    }

    /**
     * 获取查询sql
     * @param $params
     * @return $this
     */
    public function getQuery($params)
    {
        return $query = self::find()
            ->where(['is_delete' => ConstantHelper::IS_DELETE_FALSE])
            ->andFilterWhere(['like', 'route_url', $params['route_url']])
            ->andFilterWhere(['like', 'auth_name', $params['auth_name']])
            ->andFilterWhere(['is_lock' => $params['is_lock']]);
    }

    /**
     * 获取数据列
     * @param $params
     * @return array
     */
    public function getList($params)
    {
        $query = self::getQuery($params);
        $models = $query->orderBy('created_at DESC')
            ->all();
        $list = [];
        foreach ($models as $model) {
            $list[] = $model->getView();
        }
        $count = $query->count();
        $param[ConstantHelper::COUNT] = $count;
        $param[ConstantHelper::LISTS] = $list;
        return self::backListFormat($param);
    }

    /**
     * 处理返回的数据格式
     * @return array
     */
    public function getView()
    {
        return [
            'id' => (string)$this->id,
            'route_url' => $this->route_url,
            'auth_name' => $this->auth_name,
            'mark' => $this->mark,
            'parent_id' => $this->parent_id,
            'parent_auth_name' => @$this->parent->auth_name,
            'is_lock' => $this->is_lock,
            'updated_at' => $this->updated_at,
            'created_at' => $this->created_at,
        ];
    }


    /**
     * 冻结菜单是否显示
     * @return array|bool
     * @author von
     */
    public function setLockById()
    {
        $this->scenario = 'lock';
        if ($this->is_lock == ConstantHelper::IS_LOCK_FALSE) {
            $this->is_lock = ConstantHelper::IS_LOCK_TRUE;
        } else {
            $this->is_lock = ConstantHelper::IS_LOCK_FALSE;
        }
        if ($this->save()) {
            return true;
        }
        return $this->getErrors();
    }

    /**
     * @return array|bool
     * @author von
     */
    public function delById()
    {

        if ($this->children != null) {
            $this->addError('route_url', '有子级,不支持删除');
            return $this->getErrors();
        }
        $this->scenario = 'delete';
        $this->is_delete = ConstantHelper::IS_DELETE_TRUE;
        if ($this->save()) {
            return true;
        }
        return $this->getErrors();
    }

    /**
     *  获取数据列表
     *  先获取一级分类 若有子级分类则获取出来
     * @return array
     * @author von
     */
    public function getListByTree()
    {
        $models=self::find()
            ->select('id as value,auth_name as label,parent_id')
            ->where(['is_delete' => self::DELETE_NOT])
            ->asArray()
            ->all();
        $familyTree=new FamilyTree([]);
        return  $familyTree->ListToTree($models,0,'value');
    }


    /**
     * 处理数据给复选框使用
     * @param $descendants
     * @param $auth_ids
     * @return mixed
     *
     * @author von
     */
    public static function delListToCheck($descendants, $auth_ids)
    {
        foreach ($descendants as &$descendant) {
            if (in_array($descendant['id'], $auth_ids)) {
                $descendant['checked'] = true;
            } else {
                $descendant['checked'] = false;
            }
            unset($descendant['is_lock']);
            unset($descendant['is_delete']);
            unset($descendant['route_url']);
            unset($descendant['mark']);
            unset($descendant['level']);
            unset($descendant['created_at']);
            unset($descendant['updated_at']);
            $descendant['value'] = $descendant['id'];
            $descendant['label'] = $descendant['auth_name'];
            unset($descendant['auth_name']);
        }
        return $descendants;
    }

    /**
     * 角色添加时使用
     * @return mixed
     * @author von
     */
    public function checkbox()
    {
        $familyTree = new FamilyTree(Auth::_getAuths());
        $descendants = $familyTree->getDescendants(0);
        $descendants = self::delListToCheck($descendants, []);
        return $familyTree->ListToTree($descendants);
    }

    /**
     * @return $this
     * @author von
     */
    public function getChildren()
    {
        return $this->hasMany(self::className(), ['parent_id' => 'id'])
            ->where(['is_delete' => ConstantHelper::IS_DELETE_FALSE]);
    }

    /**
     * @return $this
     * @author von
     */
    public function getParent()
    {
        return $this->hasOne(self::className(), ['id' => 'parent_id']);
    }
}
