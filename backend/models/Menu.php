<?php

namespace backend\models;

use common\helpers\ConstantHelper;
use common\helpers\FamilyTree;
use common\helpers\Param;
use Yii;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "{{%menu}}".
 *
 * @property int $id 自增id
 * @property int $type 菜单类型.0后台,1前台
 * @property int $parent_id 上级菜单id
 * @property string $name 名称
 * @property string $url url地址
 * @property string $icon 图标
 * @property double $sort 排序
 * @property string $target 打开方式._blank新窗口,_self本窗口
 * @property int $is_absolute_url 是否绝对地址
 * @property int $is_display 是否显示.0否,1是
 * @property int $created_at 创建时间
 * @property int $updated_at 最后修改时间
 */
class Menu extends \backend\models\BaseModel
{

    const BACKEND_TYPE = 0;
    const FRONTEND_TYPE = 1;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%menu}}';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['type', 'parent_id', 'is_absolute_url', 'is_display', 'created_at', 'updated_at'], 'integer'],
            ['type', 'default', 'value' => 0],
            [['name', 'url'], 'required'],
            [['sort'], 'number'],
            [['name', 'url', 'icon', 'target'], 'string', 'max' => 255],
        ];
    }

    public function scenarios()
    {
        return array_merge(parent::scenarios(),
            [
                'show' => ['is_display'],
                'sort' => ['sort'],
            ]); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => '自增id',
            'type' => '菜单类型.0后台,1前台',
            'parent_id' => '上级菜单id',
            'name' => '名称',
            'url' => 'url地址',
            'icon' => '图标',
            'sort' => '排序',
            'target' => '打开方式._blank新窗口,_self本窗口',
            'is_absolute_url' => '是否绝对地址',
            'is_display' => '是否显示.0否,1是',
            'created_at' => '创建时间',
            'updated_at' => '修改时间',
        ];
    }

    /**
     * 处理返回的数据格式
     * @return array
     */
    public function getView()
    {
        return [
            'id' => $this->id,
            'name' => $this->name,
            'type' => $this->type,
            'parent_id' => $this->parent_id,
            'parent_name' => empty($this->parent) ? "" : $this->parent->name,
            'url' => $this->url,
            'icon' => $this->icon,
            'sort' => $this->sort,
            'target' => $this->target,
            'is_absolute_url' => $this->is_absolute_url,
            'is_display' => $this->is_display,
            'created_at' => $this->created_at,
            'updated_at' => $this->updated_at,
        ];
    }


    /**
     * @inheritdoc
     */
    public function afterValidate()
    {
        if (!$this->getIsNewRecord()) {
            if ($this->id == $this->parent_id) {
                $this->addError('parent_id', '不允许当前菜单作为父级菜单');
                return false;
            }
            $familyTree = new FamilyTree(Menu::_getMenus($this->type));
            $descendants = $familyTree->getDescendants($this->id);
            $descendants = ArrayHelper::getColumn($descendants, 'id');
            if (in_array($this->parent_id, $descendants)) {
                $this->addError('parent_id', '其子菜单不允许作为父级菜单');
                return false;
            }
        }
    }

    /**
     * @param bool $insert
     * @author von
     */
    public function beforeSave($insert)
    {
        parent::beforeSave($insert);
        if ($this->isNewRecord) {
            $this->created_at = time();
            $this->updated_at = time();
        } else {
            $this->updated_at = time();
        }
        return true;
    }


    /**
     * @param $type
     * @return array|\yii\db\ActiveRecord[]
     */
    protected static function _getMenus($type)
    {
        static $menus = null;
        if ($menus === null) $menus = self::find()->where(['type' => $type])->orderBy("sort asc,parent_id asc")->asArray()->all();
        foreach ($menus as &$menu) {
//            $menu['name'] = yii::t('menu', $menu['name']);
        }
        return $menus;
    }

    /**
     * 获取菜单伪树形结构
     * @param int $type
     * @return array
     * @author von
     */
    public static function getMenus($type = self::BACKEND_TYPE)
    {
        $menus = self::_getMenus($type);
        $familyTree = new FamilyTree($menus);
        $array = $familyTree->getDescendants(0);
        foreach ($array as $k => &$menu) {
            if (isset($menus[$k + 1]['level']) && $menus[$k + 1]['level'] == $menu['level']) {
                $name = ' ├' . $menu['name'];
            } else {
                $name = ' └' . $menu['name'];
            }
            if (end($menus) == $menu) {
                $sign = ' └';
            } else {
                $sign = ' │';
            }
            $menu['treename'] = str_repeat($sign, $menu['level'] - 1) . $name;
        }
        return ArrayHelper::index($array, 'id');
    }

    /**
     * @param int $type
     * @return array
     * @author von
     */
    public static function getMenusName($type = self::BACKEND_TYPE)
    {
        $menus = self::getMenus($type);
        $menus = ArrayHelper::getColumn($menus, 'treename');
        return $menus;
    }


    /**
     * @return bool
     * @author von
     */
    public function beforeDelete()
    {
        $menus = Menu::_getMenus($this->type);
        $familyTree = new FamilyTree($menus);
        $subs = $familyTree->getDescendants($this->id);
        if (!empty($subs)) {
            $this->addError('id', '此菜单还有子级菜单，不能删除');
            return false;
        }
        return true;
    }


    /**
     * @return \yii\db\ActiveQuery
     * @author von
     */
    public function getParent()
    {
        return $this->hasOne(self::className(), ['id' => 'parent_id']);
    }


    /**
     * 查询sql
     * @param $params
     * @return $this
     * @author von
     */
    public function getQuery($params)
    {
        return $query = self::find()
            ->andFilterWhere(['like', 'name', $params['name']])
            ->andFilterWhere(['like', 'url', $params['url']])
            ->andFilterWhere(['is_display' => $params['is_display']]);
    }

    /**
     * 通过id查询数据
     * @param $id
     * @return bool|null|static
     */
    public function findOneById($id)
    {
        $model = self::findOne(['id' => $id]);
        if ($model) {
            return $model;
        }
        return false;
    }


    /**
     * 新增菜单
     * @param $data
     * @return array|bool
     * @author von
     */
    public function createMenu($data)
    {
        $model = new self();
        $model->attributes = $data;
        if ($model->validate() && $model->save()) {
            return true;
        }
        return $model->getErrors();
    }


    /**
     * 修改菜单
     * @param $data
     * @return array|bool
     * @author von
     */
    public function modifyMenu($data)
    {
        $this->attributes = $data;
        if ($this->validate() && $this->save()) {
            return true;
        }
        return $this->getErrors();
    }

    /**
     * 获取数据列
     * @param $params
     * @return array
     */
    public function getList($params)
    {
        $query = Menu::getMenus(Menu::BACKEND_TYPE);
        $this->load($params);
        $temp = explode('\\', self::className());
        $temp = end($temp);
        if (isset($params[$temp])) {
            $searchArr = $params[$temp];
            foreach ($searchArr as $k => $v) {
                if ($v !== '') {
                    foreach ($query as $key => $val) {
                        if (in_array($k, ['sort', 'display'])) {
                            if ($val[$k] != $v) {
                                unset($query[$key]);
                            }
                        } else {
                            if (strpos($val[$k], $v) === false) {
                                unset($query[$key]);
                            }
                        }
                    }
                }
            }
        }
        $list=[];
        foreach ($query as $value){
            unset($value['type']);
            unset($value['target']);
            unset($value['treename']);
            $list[]=$value;
        }
        $param[ConstantHelper::COUNT] = count($list);
        $param[ConstantHelper::LISTS] = $list;
        return self::backListFormat($param);
    }


    /**
     * 设置菜单是否显示
     * @return array|bool
     * @author von
     */
    public function setMenuShowById()
    {
        $this->scenario = 'show';
        if ($this->is_display == ConstantHelper::MENU_IS_DISPLAY_TRUE) {
            $this->is_display = ConstantHelper::MENU_IS_DISPLAY_FALSE;
        } else {
            $this->is_display = ConstantHelper::MENU_IS_DISPLAY_TRUE;
        }
        if ($this->save()) {
            return true;
        }
        return $this->getErrors();
    }

    /**
     * 设置菜单排序
     * @param $data
     * @return array|bool
     * @author von
     */
    public function setMenuSortById($data)
    {
        $this->scenario = 'sort';
        $this->attributes = $data;
        if ($this->save()) {
            return true;
        }
        return $this->getErrors();
    }


    /**
     * 删除菜单
     * @param $data
     * @return array|bool
     * @author von
     */
    public function delById()
    {
        if ($this->delete()) {
            return true;
        }
        return $this->getErrors();
    }


}
