<?php

namespace backend\models;

use common\helpers\Param;
use Yii;
use common\helpers\ConstantHelper;

/**
 * This is the model class for table "{{%category_release}}".
 * @property int $id
 * @property string $mark
 * @property int $category_ids
 * @property string $source
 * @property int $display_order
 * @property int $created_at
 * @property int $release_name
 * @property int $updated_at
 */
class CategoryRelease extends BaseModel
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%category_release}}';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['release_name','source'], 'required'],
            [[ 'display_order', 'created_at', 'updated_at'], 'integer'],
            [['category_ids','source'], 'string'],
            [['release_name'], 'checkUnique'],
            [['display_order'], 'default', 'value' => 0],
            [['source'], 'in', 'range' => ['weixin', 'ios', 'android']],
            [['mark', 'release_name'], 'string', 'max' => 50],
        ];
    }

    /**
     * @param $attribute
     * @param $param
     * @author von
     */
    public function checkUnique($attribute, $param)
    {
        if ($this->isNewRecord ||
            ($this->getAttribute('release_name')!=$this->getOldAttribute('release_name'))
            || ($this->getAttribute('source')!=$this->getOldAttribute('source'))) {
            if (self::findOne(['release_name' => $this->release_name, 'source' => $this->source])) {
                $this->addError('release_name', '已存在推荐分类名称');
                $this->addError('source', '已存在推荐分类名称');
            }
        }
    }


    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'mark' => 'Mark',
            'category_ids' => 'Category ID',
            'release_name' => 'Release Name',
            'source' => 'Source',
            'display_order' => 'Display Order',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }

    public function beforeSave($insert)
    {
        parent::beforeSave($insert); // TODO: Change the autogenerated stub
        if ($insert) {
            $this->mark = Yii::$app->security->generateRandomString(32);
            $this->created_at = time();
        }
        $this->updated_at = time();
        return true;
    }

    /**
     * @param int $id
     * @return null|static
     * @author von
     */
    public function findOneById($id = 0)
    {
        return self::findOne($id);
    }

    public function detail()
    {
        $category_ids = explode(',', $this->category_ids);
        return Category::find()
            ->where(['in', 'id', $category_ids])
            ->andWhere(['is_delete' => ConstantHelper::IS_DELETE_FALSE])
            ->asArray()
            ->all();
    }

    /**
     * 获取查询sql
     * @param $params
     * @return $this
     */
    public function getQuery($params)
    {
        return $query = self::find()
            ->filterWhere(['like', 'release_name', $params['release_name']])
            ->andFilterWhere(['like', 'source', $params['source']]);
    }

    /**
     * 处理返回的数据格式
     * @return array
     */
    public function getView()
    {
        return [
            'id' => $this->id,
            'source' => $this->source,
            'display_order' => $this->display_order,
            'category_ids' => $this->category_ids,
            'release_name' => $this->release_name,
            'updated_at' => $this->updated_at,
            'created_at' => $this->created_at,
        ];
    }

    /**
     * 获取数据列
     * @param $params
     * @return array
     */
    public function getList($params)
    {
        $page_size = Param::getHeaders('page_size');
        $page = Param::getHeaders('page');
        $query = self::getQuery($params);
        $models = $query->limit($page_size)
            ->offset(($page - 1) * $page_size)
            ->orderBy('created_at DESC')
            ->all();
        $list = [];
        foreach ($models as $model) {
            $list[] = $model->getView();
        }
        $count = $query->count();
        $param[ConstantHelper::COUNT] = $count;
        $param[ConstantHelper::LISTS] = $list;
        return self::backListFormat($param);
    }

    
    /**
     * 新增权限
     * @param $data
     * @return array|bool
     */
    public function createCategoryRelease($data)
    {
        $model = new self();
        $model->attributes = $data;
        if ($model->save()) {
            return true;
        }
        return $model->getErrors();
    }

    /**
     * 修改权限
     * @param $params
     * @return array|bool
     */
    public function modifyCategoryRelease($params)
    {
        $this->attributes = $params;
        if ($this->validate() && $this->save()) {
            return true;
        }
        return $this->getErrors();
    }


    /**
     * 删除
     * @return array|bool
     */
    public function del()
    {
        if ($this->delete()) {
            return true;
        }
        return $this->getErrors();
    }

    /**
     * 删掉重写
     * @param int $type
     * @param string $source
     * @return array|\yii\db\ActiveRecord[]
     * @author von
     */
    public function getAppCategoryRelease($type = ConstantHelper::CATEGORY_CATEGORY_TYPE_WORD, $source = ConstantHelper::CATEGORY_RELEASE_SOURCE_ANDROID)
    {
        return self::find()
            ->leftJoin('xsd_category', 'xsd_category.id=xsd_category_release.category_id')
            ->select('xsd_category_release.id,
            xsd_category_release.mark,
            xsd_category.category_name,
            xsd_category.category_icon, 
            ')
            ->where(['is_show' => ConstantHelper::IS_SHOW_TRUE])
            ->andWhere(['source' => $source])
            ->andWhere(['category_type' => $type])
            ->orderBy('xsd_category_release.display_order asc, xsd_category_release.created_at asc')
            ->asArray()
            ->all();
    }


}
