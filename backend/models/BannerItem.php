<?php

namespace backend\models;

use Yii;
use common\helpers\Param;

/**
 * This is the model class for table "{{%banner_item}}".
 *
 * @property int $id
 * @property int $banner_id
 * @property string $banner_name
 * @property int $type
 * @property string $value
 * @property int $is_delete
 * @property int $display_order
 * @property int $click_number
 * @property int $start_time
 * @property int $end_time
 * @property int $created_at
 * @property int $updated_at
 */
class BannerItem extends \backend\models\BaseModel
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%banner_item}}';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['banner_id', 'banner_name', 'type', 'value', 'display_order', 'click_number', 'start_time', 'end_time'], 'required'],
            [['banner_id', 'type', 'is_delete', 'display_order', 'click_number', 'start_time', 'end_time', 'created_at', 'updated_at'], 'integer'],
            [['banner_name'], 'string', 'max' => 50],
            [['value'], 'string', 'max' => 100],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'banner_id' => 'Banner ID',
            'banner_name' => 'Banner Name',
            'type' => 'Type',
            'value' => 'Value',
            'is_delete' => 'Is Delete',
            'display_order' => 'Display Order',
            'click_number' => 'Click Number',
            'start_time' => 'Start Time',
            'end_time' => 'End Time',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }

    public function scenarios()
    {
        return array_merge(parent::scenarios(), [
            'update' => ['banner_name', 'type', 'value', 'display_order', 'start_time', 'end_time'],
        ]); // TODO: Change the autogenerated stub
    }

    public function findOneById($id)
    {
        $model = self::findOne(['id' => $id]);
        if ($model) {
            return $model;
        }
        return false;
    }

    public function getView()
    {
        return [
            'id' => (string)$this->id,
            'banner_name' => $this->banner_name,
            'banner_source_name' => $this->banner_id,
            'type' => $this->type,
            'value' => $this->value,
            'display_order' => $this->display_order,
            'click_number' => $this->click_number,
            'start_time' => date("Y-m-d H:i", $this->start_time),
            'end_time' => date("Y-m-d H:i", $this->end_time),
            'updated_at' => date("Y-m-d H:i", $this->updated_at),
            'created_at' => date("Y-m-d H:i", $this->created_at),
        ];
    }

    public function create($data)
    {
        $model = new self();
        $model->attributes = $data;
        if ($model->validate() && $model->save()) {
            return true;
        }
        return $model->getErrors();
    }

    public function beforeSave($insert)
    {
        if ($this->isNewRecord) {
            $this->is_delete = self::DELETE_NOT;
            $this->created_at = time();
            $this->updated_at = time();
        } else {
            $this->updated_at = time();
        }
        return parent::beforeSave($insert);
    }

    public function getQuery($params)
    {
        return $query = self::find()
            ->where(['is_delete' => self::DELETE_NOT])
            ->andFilterWhere(['like', 'banner_name', $params['banner_name']])
            ->andFilterWhere(['source' => $params['source']]);
    }

    public function modify($params)
    {
        $this->scenario = 'update';
        $this->attributes = $params;
        if ($this->save()) {
            return true;
        }
        return $this->getErrors();
    }


    public function getList($params)
    {
        $page_size = Param::getHeaders('page-size');
        $page = Param::getHeaders('page');
        $query = self::getQuery($params);
        $models = $query->limit($page_size)
            ->offset(($page - 1) * $page_size)
            ->orderBy('created_at DESC')
            ->all();
        $array = [];
        foreach ($models as $model) {
            $array[] = $model->getView();
        }
        $count = $query->count();
        $total_page = ceil($count / $page_size);
        header('total-count:' . $count);
        header('current-count:' . count($models));
        header('total-page:' . $total_page);
        return $array;
    }

    public function del()
    {
        $this->is_delete = self::DELETED;
        if ($this->save()) {
            return true;
        }
        return $this->getErrors();
    }

    public function getBanner()
    {
        return $this->hasOne(Banner::className(), ['id' => 'banner_id']);
    }
}
