<?php

namespace backend\models;

use common\helpers\ConstantHelper;
use common\helpers\Upload;
use Yii;
use common\helpers\Param;

/**
 * This is the model class for table "{{%banner_item}}".
 *
 * @property int $id
 * @property int $banner_id
 * @property string $banner_name
 * @property int $type
 * @property string $value
 * @property int $is_delete
 * @property int $display_order
 * @property int $click_number
 * @property int $start_time
 * @property int $end_time
 * @property int $created_at
 * @property int $updated_at
 */
class BannerItem extends \backend\models\BaseModel
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%banner_item}}';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['banner_id', 'banner_name', 'type', 'value', 'display_order', 'start_time', 'end_time'], 'required'],
            [['banner_id', 'type', 'is_delete', 'display_order', 'click_number'], 'integer'],
            [['banner_name'], 'string', 'max' => 50],
            ['click_number', 'default', 'value' => 0],
            ['type', 'in', 'range' => [1,2,3,4,5,6,7,8,9,10]],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'banner_id' => 'Banner ID',
            'banner_name' => 'Banner Name',
            'type' => 'Type',
            'value' => 'Value',
            'is_delete' => 'Is Delete',
            'display_order' => 'Display Order',
            'click_number' => 'Click Number',
            'start_time' => 'Start Time',
            'end_time' => 'End Time',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }

    /**
     * @return array
     */
    public function scenarios()
    {
        return array_merge(parent::scenarios(), [
            'update' => ['banner_name', 'type', 'value', 'display_order', 'start_time', 'end_time'],
            'delete' => ['is_delete'],
        ]); // TODO: Change the autogenerated stub
    }

    /**
     * 通过id查询数据
     * @param $id
     * @return bool|null|static
     */
    public function findOneById($id)
    {
        $model = self::findOne(['id' => $id]);
        if ($model) {
            return $model;
        }
        return false;
    }

    /**
     * 处理返回的数据格式
     * @return array
     */
    public function getView()
    {
        return [
            'id' => (string)$this->id,
            'banner_name' => $this->banner_name,
            'banner_source_name' => @$this->banner->banner_name,
            'type' => $this->type,
            'value' => $this->value == null ? '' : Yii::$app->request->hostInfo .$this->value,
            'display_order' => $this->display_order,
            'click_number' => $this->click_number,
            'start_time' => date("Y-m-d H:i", $this->start_time),
            'end_time' => date("Y-m-d H:i", $this->end_time),
            'updated_at' => date("Y-m-d H:i", $this->updated_at),
            'created_at' => date("Y-m-d H:i", $this->created_at),
        ];
    }

    /**
     * 新增广告
     * @param $data
     * @return array|bool
     */
    public function createBannerItem($data)
    {
        $model = new self();
        $model->attributes = $data;
        if ($model->validate() && $model->save()) {
            return true;
        }
        return $model->getErrors();
    }


    /**
     * 保存前处理数据
     * @param bool $insert
     * @return bool
     */
    public function beforeSave($insert)
    {
        if ($this->isNewRecord) {
            $this->is_delete = self::DELETE_NOT;
            $this->start_time = strtotime($this->start_time);
            $this->end_time = strtotime($this->end_time);
            $this->created_at = time();
            $this->updated_at = time();
        } else {
            $this->updated_at = time();
        }
        return parent::beforeSave($insert);
    }

    /**
     * 获取查询sql
     * @param $params
     * @return $this
     */
    public function getQuery($params)
    {
        return $query = self::find()
            ->where(['is_delete' => self::DELETE_NOT])
            ->andFilterWhere(['like', 'banner_name', $params['banner_name']])
            ->andFilterWhere(['source' => $params['source']]);
    }

    /**
     * 修改广告
     * @param $params
     * @return array|bool
     */
    public function modifyBannerItem($params)
    {
        $this->scenario = 'update';
        $this->attributes = $params;
        if (!empty($this->start_time)) {
            $this->start_time = strtotime($this->start_time);
        }
        if (!empty($params['value'])) {
            $this->value = Upload::base64_image_content($this->value, 'banner');
        }
        if (!empty($this->end_time)) {
            $this->end_time = strtotime($this->end_time);
        }
        if ($this->save()) {
            return true;
        }
        return $this->getErrors();
    }

    /**
     * 获取数据列
     * @param $params
     * @return array
     */
    public function getList($params)
    {
        $page_size = Param::getHeaders('page-size');
        $page = Param::getHeaders('page');
        $query = self::getQuery($params);
        $models = $query->limit($page_size)
            ->offset(($page - 1) * $page_size)
            ->orderBy('created_at DESC')
            ->all();
        $list = [];
        foreach ($models as $model) {
            $list[] = $model->getView();
        }
        $count = $query->count();
        $param[ConstantHelper::COUNT] = $count;
        $param[ConstantHelper::PAGE] = $page;
        $param[ConstantHelper::PAGE_SIZE] = $page_size;
        $param[ConstantHelper::PAGE_COUNT] =  ceil($count / $page_size);
        $param[ConstantHelper::LISTS] = $list;
        return self::backListFormat($param);
    }

    /**
     * 删除广告
     * @return array|bool
     */
    public function del()
    {
        $this->scenario = 'delete';
        $this->is_delete = self::DELETED;
        if ($this->save()) {
            return true;
        }
        return $this->getErrors();
    }

    /**
     * 和广告渠道对应关系
     * @return \yii\db\ActiveQuery
     */
    public function getBanner()
    {
        return $this->hasOne(Banner::className(), ['id' => 'banner_id']);
    }
}
