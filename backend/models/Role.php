<?php

namespace backend\models;

use common\helpers\ConstantHelper;
use common\helpers\FamilyTree;
use Yii;

/**
 * This is the model class for table "{{%role}}".
 *
 * @property int $id
 * @property string $role_name
 * @property string $description
 * @property string $auth_ids
 * @property int $created_at
 * @property int $updated_at
 */
class Role extends \backend\models\BaseModel
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%role}}';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['role_name'], 'required'],
            [['created_at', 'updated_at'], 'integer'],
            [['role_name'], 'string', 'max' => 50],
            [['description', 'auth_ids'], 'string', 'max' => 100],
        ];
    }

    /**
     * @return array
     * @author von
     */
    public function scenarios()
    {
        return array_merge(parent::scenarios(),
            [
                'delete' => ['is_delete'],
            ]); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'role_name' => '角色名称',
            'description' => '描述',
            'auth_ids' => 'Auth Ids',
            'created_at' => '创建时间',
            'updated_at' => '修改时间',
        ];
    }


    /**
     * 获取角色
     * @param null $role
     * @return array|null|\yii\db\ActiveRecord
     * @author von
     */
    public function getRole($role = null)
    {
        if (empty($role)) return null;
         return self::findOne(['role_name' => $role]);
    }

    /**
     * @param int $id
     * @return null|static
     * @author von
     */
    public function findOneById($id = 0)
    {
        return self::findOne($id);
    }

    /**
     * 获取查询sql
     * @param $params
     * @return $this
     */
    public function getQuery($params)
    {
        return $query = self::find()
            ->filterWhere(['like', 'role_name', $params['role_name']])
            ->andFilterWhere(['like', 'description', $params['description']]);
    }

    /**
     * 获取数据列
     * @param $params
     * @return array
     */
    public function getList($params)
    {
        $query = self::getQuery($params);
        $models = $query->orderBy('created_at DESC')
            ->all();
        $list = [];
        foreach ($models as $model) {
            $list[] = $model->getView();
        }
        $count = $query->count();
        $param[ConstantHelper::COUNT] = $count;
        $param[ConstantHelper::LISTS] = $list;
        return self::backListFormat($param);
    }


    /**
     * 处理返回的数据格式
     * @return array
     */
    public function getView()
    {
        return [
            'id' => (string)$this->id,
            'role_name' => $this->role_name,
            'description' => $this->description,
            'updated_at' => $this->updated_at,
            'created_at' => $this->created_at,
        ];
    }

    /**
     * @param bool $insert
     * @return bool
     * @author von
     */
    public function beforeSave($insert)
    {
        parent::beforeSave($insert);
        if ($this->isNewRecord) {
            $this->created_at = time();
            if ($this->getRole($this->role_name) != null) {
                $this->addError('role_name', $this->attributeLabels()['role_name'] . '已存在');
                return false;
            }
        }
        $this->updated_at = time();
        return true;
    }

    /**
     * 新增角色
     * @param $data
     * @return array|bool
     */
    public function createRole($data)
    {
        $model = new self();
        $model->attributes = $data;
        if ($model->save()) {
            return true;
        }
        return $model->getErrors();
    }

    /**
     * 修改权限
     * @param $params
     * @return array|bool
     */
    public function modifyRole($params)
    {
        if (trim($params['role_name']) != $this->role_name && $this->getRole($params['role_name']) != null) {
            $this->addError('role_name', $this->attributeLabels()['role_name'] . '已存在');
            return $this->getErrors();
        }
        $this->attributes = $params;
        if ($this->validate() && $this->save()) {
            return true;
        }
        return $this->getErrors();
    }

    /**
     * @return array|bool
     * @author von
     */
    public function delById()
    {
        if ($this->delete()) {
            return true;
        }
        return $this->getErrors();
    }


    /**
     * 详情
     * @author von
     */
    public function getDetail()
    {
        $auth_ids = $this->auth_ids;
        $auth_ids = explode(',', $auth_ids);
        $familyTree = new FamilyTree(Auth::_getAuths());
        $descendants = $familyTree->getDescendants(0);
        $descendants=Auth::delListToCheck($descendants,$auth_ids);
        $array['id']=$this->id;
        $array['role_name']=$this->role_name;
        $array['auth_ids']=$this->auth_ids;
        $array['description']=$this->description;
        $array['auth']=$familyTree->ListToTree($descendants);
       return  $array;
    }



}
