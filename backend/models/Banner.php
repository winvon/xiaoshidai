<?php

namespace backend\models;

use common\helpers\Param;
use Yii;

/**
 * This is the model class for table "{{%banner}}".
 *
 * @property int $id
 * @property string $banner_name
 * @property int $source
 * @property int $is_delete
 * @property int $created_at
 * @property int $updated_at
 */
class Banner extends \backend\models\BaseModel
{
    const SOURCE_XCX = 1;
    const SOURCE_IOS = 2;
    const SOURCE_AND = 3;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%banner}}';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['banner_name', 'source'], 'required'],
            [['source', 'is_delete', 'created_at', 'updated_at'], 'integer'],
            [['banner_name'], 'string', 'max' => 50],
        ];
    }

    public function scenarios()
    {
        return array_merge(parent::scenarios(),
            [
                'update' => ['banner_name', 'source'],
            ]); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'banner_name' => 'Banner Name',
            'source' => 'Source',
            'is_delete' => 'Is Delete',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }

    public function findOneById($id)
    {
        $model = self::findOne(['id' => $id]);
        if ($model) {
            return $model;
        }
        return false;
    }

    public function getView()
    {
        return [
            'id' => $this->id,
            'banner_name' => $this->banner_name,
            'source' => $this->source,
            'updated_at' => date("Y-m-d H:i", $this->updated_at),
            'created_at' => date("Y-m-d H:i", $this->created_at),
        ];
    }

    public function create($data)
    {
        $model = new self();
        $model->attributes = $data;
        if ($model->validate() && $model->save()) {
            return true;
        }
        return $model->getErrors();
    }

    public function beforeSave($insert)
    {
        if ($this->isNewRecord) {
            $this->is_delete = self::DELETE_NOT;
            $this->created_at = time();
            $this->updated_at = time();
        } else {
            $this->updated_at = time();
        }
        return parent::beforeSave($insert);
    }

    public function getQuery($params)
    {
        return $query = self::find()
            ->where(['is_delete' => self::DELETE_NOT])
            ->andFilterWhere(['like', 'banner_name', $params['banner_name']])
            ->andFilterWhere(['source' => $params['source']]);
    }

    public function modify($params)
    {
        $this->scenario = 'update';
        $this->attributes = $params;
        if ($this->save()) {
            return true;
        }
        return $this->getErrors();
    }


    public function getList($params)
    {
        $page_size = Param::getHeaders('page-size');
        $page = Param::getHeaders('page');
        $query = self::getQuery($params);
        $models = $query->limit($page_size)
            ->offset(($page - 1) * $page_size)
            ->orderBy('created_at DESC')
            ->all();
        $array = [];
        foreach ($models as $model) {
            $array[] = $model->getView();
        }
        $count = $query->count();
        $total_page = ceil($count / $page_size);
        header('total-count:' . $count);
        header('current-count:' . count($models));
        header('total-page:' . $total_page);
        return $array;
    }

    public function del()
    {
        $this->is_delete = self::DELETED;

        $bi = BannerItem::find()
            ->where(['is_delete' => self::DELETE_NOT])
            ->andWhere(['id' => $this->id])
            ->andWhere(['>', 'end_time', time()])
            ->one();

        if ($bi != null) {
            return false;
        }

        if ($this->save()) {
            return true;
        }

        return $this->getErrors();
    }


    public function getBannerItems()
    {
        return $this->hasMany(BannerItem::className(), ['banner_id' => 'id']);
    }
}
