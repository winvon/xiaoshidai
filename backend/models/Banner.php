<?php

namespace backend\models;

use common\helpers\ConstantHelper;
use common\helpers\Param;
use Yii;

/**
 * This is the model class for table "{{%banner}}".
 *
 * @property int $id
 * @property string $banner_name
 * @property int $source
 * @property int $is_delete
 * @property int $created_at
 * @property int $updated_at
 */
class Banner extends \backend\models\BaseModel
{

    const SOURCE_XCX = 1;
    const SOURCE_IOS = 2;
    const SOURCE_AND = 3;

    /**
     * 翻译source字段
     * @param string $key
     * @return array|mixed
     */
    public function getSourceItem($key = '')
    {
        $array = [
            1 => '小程序',
            2 => 'ios',
            3 => 'android',
        ];
        if (empty(!$key)) {
            return $array[$key];
        }
        return $array;
    }

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%banner}}';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['banner_name', 'source'], 'required'],
            [['source', 'is_delete', 'created_at', 'updated_at'], 'integer'],
            [['banner_name'], 'string', 'max' => 50],
            ['source', 'in', 'range' => [1, 2, 3]],
            ['banner_name', 'checkUnique'],
        ];
    }

    /**
     * rules 验证唯一字段
     * @param $attribute
     * @param $param
     */
    public function checkUnique($attribute, $param)
    {
        $model = $this->findOneByBannerName($this->$attribute);
        if ($model) {
            if ($model->id != $this->id && $model->is_delete == self::DELETE_NOT) {
                $this->addError($attribute, $this->$attribute . '已存在');
            }
        }
    }

    /**
     * @return array
     */
    public function scenarios()
    {
        return array_merge(parent::scenarios(),
            [
                'update' => ['banner_name', 'source'],
                'delete' => ['is_delete'],
            ]); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'banner_name' => '渠道名',
            'source' => '来源渠道',
            'is_delete' => 'Is Delete',
            'created_at' => '创建时间',
            'updated_at' => '更新时间',
        ];
    }

    /**
     * 通过id查询一条数据
     * @param $id
     * @return bool|null|static
     */
    public function findOneById($id)
    {
        $model = self::findOne(['id' => $id]);
        if ($model) {
            return $model;
        }
        return false;
    }

    /**
     * 通过banner_name 查询一条数据
     * @param $banner_name
     * @return bool|null|static
     */
    public function findOneByBannerName($banner_name)
    {
        $model = self::findOne(['banner_name' => $banner_name]);
        if ($model) {
            return $model;
        }
        return false;
    }

    /**
     * 处理返回的数据格式
     * @return array
     */
    public function getView()
    {
        return [
            'id' => $this->id,
            'banner_name' => $this->banner_name,
            'source' => $this->source,
            'source_name' => ConstantHelper::translationBannerSource($this->source),
            'updated_at' => date("Y-m-d H:i", $this->updated_at),
            'created_at' => date("Y-m-d H:i", $this->created_at),
        ];
    }


    /**
     * 新增一条广告渠道
     * @param $data
     * @return array|bool
     */
    public function createBanner($data)
    {
        $model = new self();
        $model->attributes = $data;
        if ($model->validate() && $model->save()) {
            return true;
        }
        return $model->getErrors();
    }

    /**
     * 保存前处理数据
     * @param bool $insert
     * @return bool
     */
    public function beforeSave($insert)
    {
        if ($this->isNewRecord) {
            $this->is_delete = self::DELETE_NOT;
            $this->created_at = time();
            $this->updated_at = time();
        } else {
            $this->updated_at = time();
        }
        return parent::beforeSave($insert);
    }

    /**
     * 查询sql
     * @param $params
     * @return $this
     */
    public function getQuery($params)
    {
        return $query = self::find()
            ->where(['is_delete' => self::DELETE_NOT])
            ->andFilterWhere(['like', 'banner_name', $params['banner_name']])
            ->andFilterWhere(['source' => $params['source']]);
    }

    /**
     * 修改广告渠道
     * @param $params
     * @return array|bool
     */
    public function modifyBanner($params)
    {
        $this->scenario = 'update';
        $this->attributes = $params;
        if ($this->save()) {
            return true;
        }
        return $this->getErrors();
    }


    /**
     * 获取数据列
     * @param $params
     * @return array
     */
    public function getList($params)
    {
        $page_size = Param::getHeaders('page-size');
        $page = Param::getHeaders('page');
        $query = self::getQuery($params);
        $models = $query->limit($page_size)
            ->offset(($page - 1) * $page_size)
            ->orderBy('created_at DESC')
            ->all();
        $list = [];
        foreach ($models as $model) {
            $list[] = $model->getView();
        }
        $count = $query->count();
        $param[ConstantHelper::COUNT] = $count;
        $param[ConstantHelper::PAGE] = $page;
        $param[ConstantHelper::PAGE_SIZE] = $page_size;
        $param[ConstantHelper::PAGE_COUNT] =  ceil($count / $page_size);
        $param[ConstantHelper::LISTS] = $list;
        return self::backListFormat($param);
    }

    /**
     * 删除广告渠道
     * @return array|bool
     */
    public function del()
    {
        $this->scenario = 'delete';
        $this->is_delete = self::DELETED;
        /*有广告则此条数据不允许删除*/
        $bi = BannerItem::find()
            ->where(['is_delete' => self::DELETE_NOT])
            ->andWhere(['id' => $this->id])
            ->andWhere(['>', 'end_time', time()])
            ->one();
        if ($bi != null) {
            return false;
        }
        if ($this->save()) {
            return true;
        }
        return $this->getErrors();
    }

    /**
     * 与广告表的对应关系
     * @return \yii\db\ActiveQuery
     */
    public function getBannerItems()
    {
        return $this->hasMany(BannerItem::className(), ['banner_id' => 'id']);
    }
}
