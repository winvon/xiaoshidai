<?php

namespace backend\models;

use common\helpers\ConstantHelper;
use common\helpers\ErrorCode;
use common\helpers\Param;
use common\helpers\WeHelper;
use Yii;
use yii\helpers\Json;

/**
 * This is the model class for table "{{%admin}}".
 *
 * @property int $id
 * @property int $accounts
 * @property string $password
 * @property string $username
 * @property string $mobile
 * @property string $email
 * @property int $is_delete
 * @property int $is_lock
 * @property int $is_super_admin
 * @property string $token
 * @property int $created_at
 * @property int $updated_at
 */
class Admin extends \backend\models\BaseModel
{

    const LOCK_NOT = 0;
    const LOCKED = 1;

    const SUPER_ADMIN_NO = 0;
    const SUPER_ADMIN_YES = 1;

    public $oldpassword;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%admin}}';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['password', 'username', 'email', 'mobile'], 'trim'],
            [['accounts', 'is_delete', 'is_lock', 'is_super_admin', 'created_at', 'updated_at'], 'integer'],
            [['password'], 'string', 'max' => 32],
            [['password'], 'string', 'max' => 32],
            ['password', 'string', 'min' => 6, 'message' => '密码长度最小6位'],
            ['username', 'string', 'max' => 20],
            ['is_lock', 'default', 'value' => self::LOCK_NOT],
            ['is_delete', 'default', 'value' => self::DELETE_NOT],
            ['mobile', 'unique', 'targetClass' => self::class, 'message' => '手机号已被使用'],
            ['email', 'unique', 'targetClass' => self::class, 'message' => '邮箱已被使用'],
            ['mobile', 'match', 'pattern' => '/^[1][34578][0-9]{9}$/', 'message' => '手机号码格式错误'],
            [['email'], 'string', 'max' => 50],
            ['email', 'email', 'message' => '邮箱格式错误'],
            [['token'], 'string', 'max' => 200],
            [['oldpassword'], 'required', 'on' => 'change-password'],
            ['oldpassword', 'checkPassword', 'on' => 'change-password'],
        ];
    }

    public function scenarios()
    {
        return array_merge(parent::scenarios(),
            [
                'setToken' => ['token'],
                'delete' => ['is_delete'],
                'lock' => ['is_lock'],
                'update' => ['username', 'password', 'mobile', 'email'],
                'change-password' => ['oldpassword', 'password'],
            ]); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'accounts' => '账号',
            'password' => '密码',
            'username' => '姓名',
            'mobile' => '手机',
            'email' => '邮箱',
            'is_delete' => 'Is Delete',
            'is_lock' => '冻结',
            'is_super_admin' => 'Is Super Admin',
            'token' => 'Token',
            'created_at' => '创建时间',
            'updated_at' => '更新时间',
        ];
    }

    /**
     * 设置登陆后token
     * @return string
     */
    public function setToken()
    {
        $this->scenario = 'setToken';
        $token = Yii::$app->security->generateRandomString();
        $cache = Yii::$app->cache;
        $cache->set($token, $this->id, 7 * 60 * 60 * 24);
        $this->token = $token;
        if (!$this->save()) {
            var_dump($this->getErrors());
            die();
        }
        return $token;
    }

    /**
     * 检查密码
     * @param $password
     * @return bool
     */
    public function checkPassword($attribute, $param)
    {
        if (!$this->validatePassword($this->$attribute)) {
            $this->addError($attribute, '旧密码错误');
        }
    }


    /**
     * 检查密码
     * @param $password
     * @return bool
     */
    public function validatePassword($password)
    {
        if ($this->password == $this->setPassword($password)) {
            return true;
        }
        return false;
    }

    /**
     * 查询单个对象
     * @param $username
     * @return bool|null|static
     */
    public function findOneByUsername($username)
    {
        $model = self::findOne(['username' => $username]);
        if ($model) {
            return $model;
        }
        return false;
    }

    /**
     * 查询单个对象
     * @param $token
     * @return bool|null|static
     */
    public function findOneByToken($token)
    {
        /*后面修改为以$user_id 查询*/
        $cache = Yii::$app->cache;
        $user_id = $cache->get($token);
        /**********************/
        $model = self::findOne(['token' => $token]);
        if ($model) {
            return $model;
        }
        return false;
    }

    /**
     * 查询单个对象
     * @param $id
     * @return bool|null|static
     */
    public function findOneById($id)
    {
        $model = self::findOne(['id' => $id]);
        if ($model) {
            return $model;
        }
        return false;
    }

    /**
     * 查询单个对象
     * @param $accounts
     * @return bool|null|static
     */
    public function findOneByAccounts($accounts)
    {
        $model = self::findOne(['accounts' => $accounts]);
        if ($model) {
            return $model;
        }
        return false;
    }

    /**
     * 处理对象的数据
     * @return array
     */
    public function getView()
    {
        return [
            'id' => $this->id,
            'accounts' => $this->accounts,
            'username' => $this->username,
            'mobile' => $this->mobile,
            'email' => $this->email,
            'is_lock' => $this->is_lock,
            'updated_at' => date("Y-m-d H:i", $this->updated_at),
            'created_at' => date("Y-m-d H:i", $this->created_at),
        ];
    }

    /**
     * 设置密码
     * @param $password
     * @return string
     */
    public function setPassword($password)
    {
        return md5($password);
    }

    /**
     * 新增员工
     * @param $data
     * @return array|bool
     */
    public function createAdmin($data)
    {
        $model = new self();
        $model->attributes = $data;
        if ($model->validate() && $model->save()) {
            return true;
        }
        return $model->getErrors();
    }

    /**
     * 处理保存前的数据
     * @param bool $insert
     * @return bool
     */
    public function beforeSave($insert)
    {
        if ($this->isNewRecord) {
            $this->accounts = self::find()->max('accounts') + 1;
            $this->password = $this->setPassword($this->password);
            $this->is_delete = self::DELETE_NOT;
            $this->is_lock = self::LOCK_NOT;
            $this->is_super_admin = self::SUPER_ADMIN_NO;
            $this->created_at = time();
            $this->updated_at = time();
        } else {
            $this->updated_at = time();
        }
        return parent::beforeSave($insert);
    }

    /**
     * 拼接sql 用于查询
     * @param $params
     * @return $this
     */
    public function getQuery($params)
    {
        return $query = self::find()
            ->where(['is_delete' => self::DELETE_NOT])
//            ->andWhere(['is_super_admin' => self::SUPER_ADMIN_NO])
            ->andFilterWhere(['accounts' => $params['accounts']])
            ->andFilterWhere(['like', 'username', $params['username']])
            ->andFilterWhere(['like', 'email', $params['email']])
            ->andFilterWhere(['like', 'mobile', $params['mobile']])
            ->andFilterWhere(['like', 'is_lock', $params['is_lock']]);
    }

    /**
     * 修改员工信息
     * @param $params
     * @return array|bool
     */
    public function modifyAdmin($params)
    {
        $this->scenario = 'update';
        $this->attributes = $params;
        if (!empty($params['password'])) {
            $this->password = $this->setPassword($this->password);
        }
        if ($this->save()) {
            return true;
        }
        return $this->getErrors();
    }

    /**
     * 获取数据列
     * @param $params
     * @return array
     */
    public function getList($params)
    {
        $page_size = Param::getParamFromGet('page_size');
        $page = Param::getParamFromGet('page');
        $query = self::getQuery($params);
        $models = $query->limit($page_size)
            ->offset(($page - 1) * $page_size)
            ->orderBy('created_at DESC')
            ->all();
        $list = [];
        foreach ($models as $model) {
            $list[] = $model->getView();
        }
        $count = $query->count();
        // 增加一个 Pragma 头，已存在的Pragma 头不会被覆盖。
        $param[ConstantHelper::COUNT] = $count;
        $param[ConstantHelper::PAGE] = $page;
        $param[ConstantHelper::PAGE_SIZE] = $page_size;
        $param[ConstantHelper::PAGE_COUNT] =  ceil($count / $page_size);
        $param[ConstantHelper::LISTS] = $list;
        return self::backListFormat($param);
    }

    /**
     * 删除员工
     * @return array|bool
     */
    public function del()
    {
        $this->scenario='delete';
        $this->is_delete = self::DELETED;
        if ($this->save()) {
            return true;
        }
        return $this->getErrors();
    }

    /**
     * 冻结员工
     * @return array|bool
     */
    public function lock()
    {
        $this->scenario='lock';
        $this->is_lock = self::LOCKED;
        if ($this->save()) {
            return true;
        }
        return $this->getErrors();
    }

    /**
     *解冻员工
     * @return array|bool
     */
    public function unlock()
    {
        $this->scenario='lock';
        $this->is_lock = self::LOCK_NOT;
        if ($this->save()) {
            return true;
        }
        return $this->getErrors();
    }


    /**
     * 修改密码
     * @return array|bool
     */
    public function changePassword($param)
    {
        if (empty($param['password'])) {
            $this->addError('password', '新密码必填');
        }

        if (empty($param['oldpassword'])) {
            $this->addError('oldpassword', '旧密码必填');
        }

        if (!empty($param['oldpassword']) && $this->password != $this->setPassword($param['oldpassword'])) {
            $this->addError('oldpassword', '旧密码错误');
        }

        $this->password = $this->setPassword($param['password']);

        if (empty($this->getErrors()) && $this->save()) {
            return true;
        }
        return $this->getErrors();
    }
}
