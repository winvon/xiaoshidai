<?php

namespace backend\models;

use common\helpers\ErrorCode;
use common\helpers\Param;
use common\helpers\WeHelper;
use Yii;
use yii\helpers\Json;

/**
 * This is the model class for table "{{%admin}}".
 *
 * @property int $id
 * @property int $accounts
 * @property string $password
 * @property string $username
 * @property string $mobile
 * @property string $email
 * @property int $is_delete
 * @property int $is_lock
 * @property int $is_super_admin
 * @property string $token
 * @property int $created_at
 * @property int $updated_at
 */
class Admin extends \backend\models\BaseModel
{

    const LOCK_NOT = 0;
    const LOCKED = 1;

    const SUPER_ADMIN_NO = 0;
    const SUPER_ADMIN_YES = 1;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%admin}}';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['password', 'username', 'email', 'mobile'], 'trim'],
            [['accounts', 'is_delete', 'is_lock', 'is_super_admin', 'created_at', 'updated_at'], 'integer'],
            [['password'], 'string', 'max' => 32],
            ['password', 'string', 'min' => 6, 'message' => '密码长度最小6位'],
            ['username', 'string', 'max' => 20],
            ['is_lock', 'default', 'value' => self::LOCK_NOT],
            ['is_delete', 'default', 'value' => self::DELETE_NOT],
            ['mobile', 'unique', 'targetClass' => self::class, 'message' => '手机号已被使用'],
            ['email', 'unique', 'targetClass' => self::class, 'message' => '邮箱已被使用'],
            ['mobile', 'match', 'pattern' => '/^[1][34578][0-9]{9}$/', 'message' => '手机号码格式错误'],
            [['email'], 'string', 'max' => 50],
            ['email', 'email', 'message' => '邮箱格式错误'],
            [['token'], 'string', 'max' => 200],
        ];
    }

    public function scenarios()
    {
        return array_merge(parent::scenarios(),
            [
                'setToken' => ['token'],
                'update' => ['username', 'password', 'mobile', 'email'],
            ]); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'accounts' => 'Accounts',
            'password' => 'Password',
            'username' => 'Username',
            'mobile' => 'Mobile',
            'email' => 'Email',
            'is_delete' => 'Is Delete',
            'is_lock' => 'Is Lock',
            'is_super_admin' => 'Is Super Admin',
            'token' => 'Token',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }


    /**
     * @return string
     */
    public function setToken()
    {
        $this->scenario = 'setToken';
        $token = 'aaaaaaaaa';
        $this->token = $token;
        if (!$this->save()) {
            var_dump($this->getErrors());
            die();
        }
        return $token;
    }

    public function validatePassword($password)
    {
        if ($this->password == $this->setPassword($password)) {
            return true;
        }
        return false;
    }

    public function findOneByUsername($username)
    {
        $model = self::findOne(['username' => $username]);
        if ($model) {
            return $model;
        }
        return false;
    }

    public function findOneByToken($token)
    {
        $model = self::findOne(['token' => $token]);
        if ($model) {
            return $model;
        }
        return false;
    }

    public function findOneById($id)
    {
        $model = self::findOne(['id' => $id]);
        if ($model) {
            return $model;
        }
        return false;
    }

    public function findOneByAccounts($accounts)
    {
        $model = self::findOne(['accounts' => $accounts]);
        if ($model) {
            return $model;
        }
        return false;
    }

    public function getView()
    {
        return [
            'id' => $this->id,
            'accounts' => $this->accounts,
            'username' => $this->username,
            'mobile' => $this->mobile,
            'email' => $this->email,
            'is_lock' => $this->is_lock,
            'updated_at' => date("Y-m-d H:i", $this->updated_at),
            'created_at' => date("Y-m-d H:i", $this->created_at),
        ];
    }

    public function setPassword($password)
    {
        return md5($password);
    }

    public function create($data)
    {
        $model = new self();
        $model->attributes = $data;
        if ($model->validate() && $model->save()) {
            return true;
        }
        return $model->getErrors();
    }

    public function beforeSave($insert)
    {
        if ($this->isNewRecord) {
            $this->accounts = self::find()->max('accounts') + 1;
            $this->password = $this->setPassword($this->password);
            $this->is_delete = self::DELETE_NOT;
            $this->is_lock = self::LOCK_NOT;
            $this->is_super_admin = self::SUPER_ADMIN_NO;
            $this->created_at = time();
            $this->updated_at = time();
        } else {
            $this->updated_at = time();
        }
        return parent::beforeSave($insert);
    }

    public function getQuery($params)
    {
        return $query = self::find()
            ->where(['is_delete' => self::DELETE_NOT])
            ->andWhere(['is_super_admin' => self::SUPER_ADMIN_NO])
            ->andFilterWhere(['accounts' => $params['accounts']])
            ->andFilterWhere(['like', 'username', $params['username']])
            ->andFilterWhere(['like', 'email', $params['email']])
            ->andFilterWhere(['like', 'mobile', $params['mobile']])
            ->andFilterWhere(['like', 'is_lock', $params['is_lock']]);
    }

    public function modify($params)
    {
        $this->scenario = 'update';
        $this->attributes = $params;
        if (!empty($this->password)) {
            $this->password = $this->setPassword($this->password);
        }
        if ($this->save()) {
            return true;
        }
        return $this->getErrors();
    }


    public function getList($params)
    {
        $page_size = Param::getHeaders('page-size');
        $page = Param::getHeaders('page');
        $query = self::getQuery($params);
        $models = $query->limit($page_size)
            ->offset(($page - 1) * $page_size)
            ->orderBy('created_at DESC')
            ->all();
        $array = [];
        foreach ($models as $model) {
            $array[] = $model->getView();
        }
        $count = $query->count();
        $total_page = ceil($count / $page_size);
        $headers = Yii::$app->request->headers;
        // 增加一个 Pragma 头，已存在的Pragma 头不会被覆盖。
        header('total-count:' . $count);
        header('current-count:' . count($models));
        header('total-page:' . $total_page);
        return $array;
    }

    public function del()
    {
        $this->is_delete = self::DELETED;
        if ($this->save()) {
            return true;
        }
        return $this->getErrors();
    }

    public function lock()
    {
        $this->is_lock = self::LOCKED;
        if ($this->save()) {
            return true;
        }
        return $this->getErrors();
    }

    public function unlock()
    {
        $this->is_lock = self::LOCK_NOT;
        if ($this->save()) {
            return true;
        }
        return $this->getErrors();
    }
}
