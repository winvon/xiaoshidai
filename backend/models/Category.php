<?php

namespace backend\models;

use common\helpers\ConstantHelper;
use common\helpers\Param;
use Yii;
use yii\helpers\Html;

/**
 * This is the model class for table "{{%category}}".
 * @property int $id
 * @property int type
 * @property string $category_name
 * @property int category_type
 * @property string $category_icon
 * @property int $display_order
 * @property int $parent_id
 * @property int $is_show
 * @property int $is_delete
 * @property int $created_at
 * @property int $updated_at
 */
class Category extends \backend\models\BaseModel
{
    const SHOW = 0;
    const SHOW_NOT = 1;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%category}}';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['category_name', 'type','category_type'], 'required'],
            [['display_order', 'parent_id', 'is_show', 'is_delete'], 'integer'],
            [['category_name'], 'string', 'max' => 50],
            ['is_show', 'default', 'value' => self::SHOW],
            ['display_order', 'default', 'value' => 0],
            ['parent_id', 'default', 'value' => 0],
            ['category_icon', 'default', 'value' => ''],
//            ['category_name', 'checkUnique'],
            ['is_delete', 'default', 'value' => self::DELETE_NOT],
            [['category_icon', 'created_at', 'updated_at'], 'string', 'max' => 100],
        ];
    }

    /**
     * rules 验证category_name唯一
     * @param $attribute
     * @param $param
     */
    public function checkUnique($attribute, $param)
    {
        $model = $this->findOneByCategoryName($this->$attribute);
        if ($model) {
            if ($model->id != $this->id && $model->is_delete == self::DELETE_NOT) {
                $this->addError($attribute, $this->$attribute . '已存在');
            }
        }
    }

    /**
     * @return array
     */
    public function scenarios()
    {
        return array_merge(parent::scenarios(), [
//            'update' => ['category_name', 'category_icon', 'display_order', 'parent_id', 'is_show'],
            'delete' => ['is_delete'],
            'show' => ['is_show'],
        ]); // TODO: Change the autogenerated stub
    }


    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'type' => '类别',
            'category_name' => '分类名称',
            'category_type' => '分类类别',
            'category_icon' => '图标',
            'display_order' => '显示排序',
            'parent_id' => '父ID',
            'is_show' => '是否显示',
            'is_delete' => 'Is Delete',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }

    /**
     * 通过id查询数据
     * @param $id
     * @return bool|null|static
     */
    public function findOneById($id)
    {
        $model = self::findOne(['id' => $id]);
        if ($model) {
            return $model;
        }
        return false;
    }


    /**
     * 通过category_name查询数据
     * @param $category_name
     * @return bool|null|static
     */
    public function findOneByCategoryName($category_name)
    {
        $model = self::findOne(['category_name' => $category_name]);
        if ($model) {
            return $model;
        }
        return false;
    }

    /**
     * 处理返回的数据格式
     * @return array
     */
    public function getView()
    {
        return [
            'id' => $this->id,
            'type' => $this->type,
            'category_name' => $this->category_name,
            'category_type' => $this->category_type,
            'category_icon' => Html::encode($this->category_icon),
            'parent_category_icon' =>$this->parent_id==null?'': Html::encode($this->parent->category_icon),
            'parent_category_name' => $this->parent_id==null?'': Html::encode($this->parent->category_name),
            'parent_id' => $this->parent_id,
            'display_order' => $this->display_order,
            'is_show' => $this->is_show,
            'updated_at' => $this->updated_at,
            'created_at' => $this->created_at,
        ];
    }

    /**
     * 与父级对应关系
     * @return \yii\db\ActiveQuery
     */
    public function getParent()
    {
        return $this->hasOne(self::className(), ['id' => 'parent_id']);
    }

    /**
     * 与子级对应关系
     * @return \yii\db\ActiveQuery
     */
    public function getChildren()
    {
        return $this->hasMany(self::className(), ['parent_id' => 'id'])
            ->where(['is_delete' => ConstantHelper::IS_DELETE_FALSE]);
    }

    /**
     * 创建产品分类
     * @param $data
     * @return array|bool
     */
    public function createCategory($data)
    {
        $model = new self();
        $model->attributes = $data;
        if ($model->validate() && $model->save()) {
            return true;
        }
        return $model->getErrors();
    }

    /**
     * 处理保存前数据格式
     * @param bool $insert
     * @return bool
     */
    public function beforeSave($insert)
    {
        if ($this->isNewRecord) {
            $this->is_delete = self::DELETE_NOT;
            $this->created_at = time();
            $this->updated_at = time();
        } else {
            $this->updated_at = time();
        }
        return parent::beforeSave($insert);
    }

    /**
     * 获取查询数据sql
     * @param $params
     * @return $this
     */
    public function getQuery($params)
    {
        return $query = self::find()
            ->where(['is_delete' => self::DELETE_NOT])
            ->andFilterWhere(['like', 'category_name', $params['category_name']])
            ->andFilterWhere(['parent_id' => $params['parent_id']]);
    }

    /**
     * 修改产品分类
     * @param $params
     * @return array|bool
     */
    public function modifyCategory($params)
    {
//        $this->scenario = 'update';
        $this->attributes = $params;
        if ($this->save()) {
            return true;
        }
        return $this->getErrors();
    }

    /**
     * 获取数据列表
     * @param $params
     * @return array
     */
    public function getList($params)
    {
        $page_size = Param::getParamFromGet('page_size');
        $page = Param::getParamFromGet('page');
        $query = self::getQuery($params);
        $models = $query->limit($page_size)
            ->offset(($page - 1) * $page_size)
            ->orderBy('created_at DESC')
            ->all();
        $list = [];
        foreach ($models as $model) {
            $list[] = $model->getView();
        }
        $count = $query->count();
        $param[ConstantHelper::COUNT] = $count;
        $param[ConstantHelper::PAGE] = $page;
        $param[ConstantHelper::PAGE_SIZE] = $page_size;
        $param[ConstantHelper::PAGE_COUNT] = ceil($count / $page_size);
        $param[ConstantHelper::LISTS] = $list;
        return self::backListFormat($param);
    }

    /**
     * 获取数据列表
     * 先获取一级分类 若有子级分类则获取出来
     * @param $params
     * @return array
     * @author von
     */
    public function getListByTree($params)
    {
        $models = self::find()
            ->where(['is_delete' => self::DELETE_NOT])
            ->andWhere(['parent_id' => 0])
            ->all();
        $list = [];
        foreach ($models as $model) {
            $children = self::getChildrenList($model->id);
            if (empty($children)){
                $list[] = [
                    'value' => $model->id,
                    'label' => $model->category_name,
                    'category_icon' => Html::encode($model->category_icon),
                ];
            }else{
                $list[] = [
                    'value' => $model->id,
                    'label' => $model->category_name,
                    'category_icon' => Html::encode($model->category_icon),
                    'children' => $children
                ];
            }
        }
        return $list;
    }

    /**
     * 找子级
     * @param int $parent_id
     * @return array
     *
     * @author von
     */
    public static function getChildrenList($parent_id = 0)
    {
        $model = self::findOne($parent_id);
        $list=[];
        $childs = $model->children;//找到子集
        if (!empty($childs)) {
            $children = [];
            foreach ($childs as $child) {
                if (!empty($child->children)) {
                    $children=self::getChildrenList($child->id);
                }
                if (empty($children)){
                    $list[] = [
                        'value' => $child->id,
                        'label' => $child->category_name,
                        'category_icon' => Html::encode($child->category_icon)
                    ];
                }else{
                    $list[] = [
                        'value' => $child->id,
                        'label' => $child->category_name,
                        'category_icon' => Html::encode($child->category_icon),
                        'children' => $children
                    ];
                    unset($children);
                }
            }
        }
        return $list;
    }


    /**
     * 删除分类
     * @return array|bool
     */
    public function del()
    {
        $this->scenario = 'delete';
        $this->is_delete = self::DELETED;
        /*有子级，拒绝删除*/
        $model = self::find()
            ->where(['is_delete' => self::DELETE_NOT])
            ->andWhere(['parent_id' => $this->id])
            ->one();
        if ($model != null) {
            return false;
        }
        if ($this->save()) {
            return true;
        }
        return $this->getErrors();
    }

    /**
     * 显示与隐藏产品分类
     * is_show 数据处理为反；若为0，这处理为1
     * @return array|bool
     */
    public function showCategory()
    {
        $this->scenario = 'show';
        if ($this->is_show == self::SHOW) {
            $this->is_show = self::SHOW_NOT;
        } else {
            $this->is_show = self::SHOW;
        }
        if ($this->save()) {
            return true;
        }
        return $this->getErrors();
    }

}
