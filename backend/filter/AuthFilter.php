<?php
/**
 * Created by von.
 * User: FOCUS
 * Date: 2019/1/25
 * Time: 10:03
 */

namespace backend\filter;


use backend\models\Auth;
use backend\models\Emp;
use backend\models\Role;
use common\helpers\ConstantHelper;
use common\helpers\FamilyTree;
use common\helpers\Param;
use yii\base\ActionFilter;
use yii\helpers\ArrayHelper;
use yii\web\ForbiddenHttpException;

class AuthFilter extends ActionFilter
{
    public $route;

    public $auths = [];

    public $id;

    public $parentIds = [];

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated
    }

    public function beforeAction($action)
    {
        $route = $action->uniqueId;
        $this->route = $route;
        $auths = $this->authByUser;
        if (!in_array($route, $auths)) {
            throw new ForbiddenHttpException('无权限,禁止访问');
        }
        $this->getParentIds();//缓存所有父id
        if (!$this->checkLock()) {
            throw new ForbiddenHttpException('请求地址已冻结,禁止访问');
        }
        return true;
    }

    public function getAuthByUser()
    {
        $token = Param::getHeaders('token');
        $user_id = \Yii::$app->cache->get($token);
        $user = Emp::findOne(2);
        if ($user == null) {
            return [];
        }
        $role_ids = array_filter(array_unique(explode(',', $user->role_ids)));
        $roles = Role::find()->where(['in', 'id', $role_ids])->asArray()->all();
        $auth_ids = ArrayHelper::getColumn($roles, 'auth_ids');
        $auth_ids = implode(',', $auth_ids);
        $auth_ids = explode(',', $auth_ids);
        $auth_ids = array_filter(array_unique($auth_ids));
        $auths = Auth::find()->where(['in', 'id', $auth_ids])->andWhere(['is_delete' => ConstantHelper::IS_DELETE_FALSE])->asArray()->all();
        $this->auths = $auths;
        return ArrayHelper::getColumn($auths, 'route_url');
    }

    /**
     * 权限的所有父权限
     * @param $auths
     * @param $id
     * @return array
     * @author von
     */
    public function getParentIds()
    {
        $a = Auth::findOne(['route_url' => $this->route]);
        $familyTree = new FamilyTree($this->auths);
         $this->id = $a->id;
        $parent = $familyTree->getAncectors($this->id);
        $this->parentIds = ArrayHelper::getColumn($parent, 'id');
        return true;
    }

    /**
     * 判断是否冻结
     * @return bool
     * @author von
     */
    public function checkLock()
    {
        array_push($this->parentIds, $this->id);
        $a = Auth::find()
            ->where(['is_delete' => ConstantHelper::IS_DELETE_FALSE])
            ->andWhere(['is_lock' => ConstantHelper::IS_LOCK_TRUE])
            ->andWhere(['in', 'id', $this->parentIds])
            ->one();
        if ($a == null) {
            return true;
        }
        return false;
    }

}